<?php

/*
 * @file
 * Drupal Module: Open Web Analytics (owa)
 * Adds the required Javascript to the bottom of all your Drupal pages
 * to allow tracking by the Open Web Analytics statistics package.
 */

/**
 * Implementation of hook_help().
 */
function owa_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/owa':
      return t('<a href="@owa_url">Open Web Analytics</a> is a free self hosted website traffic and marketing effectiveness service.', array('@owa_url' => 'http://www.openwebanalytics.com'));
  }
}

/**
 * Implementation of hook_permission().
 */
function owa_permission() {
  return array('administer open web analytics', 'opt-in or out of tracking in owa', 'use PHP for tracking visibility in owa');
}

/**
 * Implementation of hook_menu().
 */
function owa_menu() {
  $items['admin/config/system/owa'] = array(
    'title' => 'Open Web Analytics',
    'description' => 'Configure the settings used to generate your Open Web Analytics tracking code.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('owa_admin_settings_form'),
    'access arguments' => array('administer open web analytics'),
    'file' => 'owa.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implementation of hook_init().
 */
function owa_init() {
  global $user;

  // Set our default settings.
  $settings = array(
    'id' => variable_get('owa_account', ''),
    'baseURL' => variable_get('owa_base_url', ''),
    'trackPageView' => variable_get('owa_track_page_view', 1),
    'trackClicks' => variable_get('owa_track_clicks', 1),
    'trackDomStream' => variable_get('owa_track_dom_stream', 1),
    'trackAcrossDomain' => variable_get('owa_track_across_domain', 0),
    'debug' => variable_get('owa_debug', 0),
  );

  // 1. Check if the owa account number has a value.
  // 2. Track page views based on visibility value.
  // 3. Check if we should track the currently active user's role.
  // 4. Check if one of the link tracking variables is selected.
  if (!empty($settings['id']) && !empty($settings['base_url']) && _owa_visibility_pages() && _owa_visibility_user($user) && ($settings['trackPageView'] || $settings['trackClicks'] || $settings['trackDomStream'])) {
    drupal_add_js(array('owa' => $settings), array('type' => 'setting', 'scope' => 'header'));
    drupal_add_js(drupal_get_path('module', 'owa') . '/owa.js', array('type' => 'file', 'scope' => 'header'));
  }
}

/**
 * Implementation of hook_user().
 *
 * Allow users to decide if tracking code will be added to pages or not.
 */
function owa_form_user_profile_form_alter(&$form, &$form_state) {
  $account = $form['#user'];
  if ($form['#user_category'] == 'account' && user_access('opt-in or out of tracking in owa') && _owa_visibility_roles($account)) {
    $form['owa'] = array(
      '#type' => 'fieldset',
      '#title' => t('Open Web Analytics configuration'),
      '#weight' => 3,
      '#collapsible' => TRUE,
      '#tree' => TRUE
    );

    $custom = variable_get('owa_custom', 0);

    switch ($custom) {
      case 1:
        $description = t('Users are tracked by default, but you are able to opt out.');
        break;

      case 2:
        $description = t('Users are <em>not</em> tracked by default, but you are able to opt in.');
        break;
    }

    $form['owa']['custom'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable user tracking'),
      '#description' => $description,
      '#default_value' => isset($account->owa['custom']) ? $account->owa['custom'] : ($custom == 1)
    );
  }
}

/**
 * Tracking visibility check for an user object.
 *
 * @param $account
 *   A user object containing an array of roles to check.
 * @return boolean
 *   A decision on if the current user is being tracked by Open Web Analytics.
 */
function _owa_visibility_user($account) {

  $enabled = FALSE;

  // Is current user a member of a role that should be tracked?
  if (_owa_visibility_roles($account)) {

    // Use the user's block visibility setting, if necessary.
    if (($custom = variable_get('owa_custom', 0)) != 0) {
      if ($account->uid && isset($account->owa['custom'])) {
        $enabled = $account->owa['custom'];
      }
      else {
        $enabled = ($custom == 1);
      }
    }
    else {
      $enabled = TRUE;
    }

  }

  return $enabled;
}

/**
 * Based on visibility setting this function returns TRUE if owa code should
 * be added for the current role and otherwise FALSE.
 */
function _owa_visibility_roles($account) {

  $visibility = variable_get('owa_visibility_roles', 0);
  $enabled = $visibility;
  $roles = variable_get('owa_roles', array());

  if (array_sum($roles) > 0) {
    // One or more roles are selected.
    foreach (array_keys($account->roles) as $rid) {
      // Is the current user a member of one of these roles?
      if (isset($roles[$rid]) && $rid == $roles[$rid]) {
        // Current user is a member of a role that should be tracked/excluded from tracking.
        $enabled = !$visibility;
        break;
      }
    }
  }
  else {
    // No role is selected for tracking, therefore all roles should be tracked.
    $enabled = TRUE;
  }

  return $enabled;
}

/**
 * Based on visibility setting this function returns TRUE if owa code should
 * be added to the current page and otherwise FALSE.
 */
function _owa_visibility_pages() {
  static $page_match;

  // Cache visibility setting in hook_init for hook_footer.
  if (!isset($page_match)) {

    $visibility = variable_get('owa_visibility', 0);
    $setting_pages = variable_get('owa_pages', '');

    // Match path if necessary.
    if (!empty($setting_pages)) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($setting_pages);
      if ($visibility < 2) {
        // Convert the Drupal path to lowercase
        $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
        // Compare the lowercase internal and lowercase path alias (if any).
        $page_match = drupal_match_path($path, $pages);
        if ($path != $_GET['q']) {
          $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
        }
        // When $visibility has a value of 0, the tracking code is displayed on
        // all pages except those listed in $pages. When set to 1, it
        // is displayed only on those pages listed in $pages.
        $page_match = !($visibility xor $page_match);
      }
      else {
        if (module_exists('php')) {
          $page_match = php_eval($setting_pages);
        }
      }
    }
    else {
      $page_match = TRUE;
    }

  }
  return $page_match;
}